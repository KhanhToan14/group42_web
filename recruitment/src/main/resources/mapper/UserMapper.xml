<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.web.recruitment.persistence.mapper.UserMapper">
    <resultMap id="user" type="com.web.recruitment.persistence.dto.User">
        <result column="ID" property="id"/>
        <result column="USERNAME" property="username"/>
        <result column="FIRST_NAME" property="firstName"/>
        <result column="LAST_NAME" property="lastName"/>
        <result column="GENDER" property="gender"/>
        <result column="DATE_OF_BIRTH" property="dateOfBirth"/>
        <result column="PHONE" property="phone"/>
        <result column="EMAIL" property="email"/>
        <result column="ADDRESS" property="address"/>
        <result column="AVATAR" property="avatar"/>
        <result column="HASH_PASSWORD" property="password"/>
        <result column="ROLE" property="role"/>
        <result column="COMPANY_ID" property="companyId"/>
        <result column="SKILLS" property="skills"/>
        <result column="STATUS" property="status"/>
        <result column="DEL_YN" property="delYn"/>
        <result column="CREATE_AT" property="createAt"/>
        <result column="UPDATE_AT" property="updateAt"/>
        <result column="EMAIL_VERIFIED_AT" property="emailVerifiedAt"/>
        <result column="OTP" property="otp"/>
        <result column="OTP_TIME_SENT" property="otpTimeSent"/>
    </resultMap>
    <resultMap id="userInformation" type="com.web.recruitment.api.dto.user.UserInformation">
        <result column="ID" property="id"/>
        <result column="USERNAME" property="username"/>
        <result column="FIRST_NAME" property="firstName"/>
        <result column="LAST_NAME" property="lastName"/>
        <result column="GENDER" property="gender"/>
        <result column="DATE_OF_BIRTH" property="dateOfBirth"/>
        <result column="PHONE" property="phone"/>
        <result column="EMAIL" property="email"/>
        <result column="ADDRESS" property="address"/>
        <result column="AVATAR" property="avatar"/>
        <result column="ROLE" property="role"/>
        <result column="COMPANY_ID" property="companyId"/>
        <result column="SKILLS" property="skills"/>
    </resultMap>
    <sql id="select_user">
        SELECT *
        FROM USER_TB
    </sql>
    <sql id="update_user">
        UPDATE
        USER_TB
        SET USERNAME = BINARY#{username}
        , FIRST_NAME = BINARY#{firstName}
        , LAST_NAME = BINARY#{lastName}
        , GENDER = #{gender}
        , DATE_OF_BIRTH = #{dateOfBirth}
        , PHONE = #{phone}
        , EMAIL = #{email}
        , ADDRESS = #{address}
        , HASH_PASSWORD = #{password}
        , ROLE = #{role}
        , COMPANY_ID = #{companyId}
        , UPDATE_AT = NOW()
    </sql>
    <sql id="delete_user">
        UPDATE
        USER_TB
        SET DEL_YN = 1
        , UPDATE_AT = NOW()
    </sql>
    <select id="list_user" resultMap="user" parameterType="map">
        <include refid="select_user"></include>
        WHERE DEL_YN = 0
        ORDER BY CREATE_DT DESC
    </select>
    <select id="select" resultMap="user" parameterType="int">
        <include refid="select_user"></include>
        WHERE ID = #{id}
        AND DEL_YN = 0
        <!--            AND STATUS = 1-->
    </select>
    <!-- list phÃ¢n trang-->
    <select id="list" resultMap="userInformation" parameterType="map">
        <include refid="select_user"></include>
        WHERE DEL_YN = 0
        <!--            AND STATUS = 1-->
        <if test="keyword != null">
            AND ((USERNAME LIKE CONCAT("%", #{keyword}, "%"))
            OR (EMAIL LIKE CONCAT("%", #{keyword}, "%"))
            OR (FIRST_NAME LIKE CONCAT("%", #{keyword}, "%"))
            OR (LAST_NAME LIKE CONCAT("%", #{keyword}, "%")))
        </if>
        ORDER BY
        <if test="sortBy == 'username'">
            USERNAME
        </if>
        <if test="sortBy == 'email'">
            EMAIL
        </if>
        <if test="sortBy == 'firstName'">
            FIRST_NAME
        </if>
        <if test="sortBy == 'lastName'">
            LAST_NAME
        </if>
        <if test="sortType == 'asc'">
            ASC
        </if>
        <if test="sortType == 'desc'">
            DESC
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>
    <select id="total" resultType="int" parameterType="map">
        SELECT COUNT(ID)
        FROM USER_TB
        WHERE DEL_YN = 0
        <!--            AND STATUS = 1-->
        AND (USERNAME LIKE CONCAT("%", #{username}, "%"))
        OR (EMAIL LIKE CONCAT("%", #{email}, "%"))
        OR (FIRST_NAME LIKE CONCAT("%", #{firstName}, "%"))
        OR (LAST_NAME LIKE CONCAT("%", #{lastName}, "%"))
    </select>
    <select id="listRole" resultMap="userInformation" parameterType="map">
        <include refid="select_user"></include>
        WHERE DEL_YN = 0
        <!--            AND STATUS = 1-->
        AND ROLE = #{role}
        ORDER BY
        <if test="sortType == 'asc'">
            ASC
        </if>
        <if test="sortType == 'desc'">
            DESC
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>
    <select id="totalRole" resultType="int" parameterType="map">
        SELECT COUNT(ID)
        FROM USER_TB
        WHERE DEL_YN = 0
        <!--            AND STATUS = 1-->
        AND ROLE = #{role}
    </select>
    <insert id="insert" parameterType="com.web.recruitment.persistence.dto.User" keyColumn="id"
            keyProperty="id"
            useGeneratedKeys="true">
        INSERT INTO
        USER_TB
        (
        USERNAME
        , FIRST_NAME
        , LAST_NAME
        , GENDER
        , DATE_OF_BIRTH
        , PHONE
        , EMAIL
        , ADDRESS
        , AVATAR
        , HASH_PASSWORD
        , ROLE
        , COMPANY_ID
        , SKILLS
        , STATUS
        , DEL_YN
        , CREATE_AT
        , UPDATE_AT
        , EMAIL_VERIFIED_AT
        )
        VALUES
        (
        BINARY#{username}
        , BINARY#{firstName}
        , BINARY#{lastName}
        , #{gender}
        , #{dateOfBirth}
        , #{phone}
        , #{email}
        , #{address}
        , #{avatar}
        , #{password}
        , #{role}
        , #{companyId}
        , #{skills}
        , 0
        , 0
        , NOW()
        , NOW()
        , NOW()
        )
    </insert>
    <insert id="register" parameterType="com.web.recruitment.persistence.dto.User" keyColumn="id"
            keyProperty="id"
            useGeneratedKeys="true">
        INSERT INTO
        USER_TB
        (
        USERNAME
        , FIRST_NAME
        , LAST_NAME
        , GENDER
        , DATE_OF_BIRTH
        , PHONE
        , EMAIL
        , ADDRESS
        , AVATAR
        , HASH_PASSWORD
        , ROLE
        , COMPANY_ID
        , SKILLS
        , STATUS
        , DEL_YN
        , CREATE_AT
        , UPDATE_AT
        , OTP
        , OTP_TIME_SENT
        )
        VALUES
        (
        BINARY#{username}
        , BINARY#{firstName}
        , BINARY#{lastName}
        , #{gender}
        , #{dateOfBirth}
        , #{phone}
        , #{email}
        , #{address}
        , #{avatar}
        , #{password}
        , #{role}
        , #{companyId}
        , #{skills}
        , 0
        , 0
        , NOW()
        , NOW()
        , #{otp}
        , #{otpTimeSent}
        )
    </insert>
    <select id="selectCountByUsername" resultType="int" parameterType="map">
        SELECT COUNT(ID)
        FROM USER_TB
        WHERE USERNAME = BINARY#{username}
        AND DEL_YN = 0
        <!--            AND STATUS = 1-->
    </select>
    <update id="update" parameterType="com.web.recruitment.api.dto.user.UserUpdate" keyColumn="id"
            keyProperty="id"
            useGeneratedKeys="true">
        <include refid="update_user"></include>
        WHERE ID = #{id}
        AND DEL_YN = 0
        <!--            AND STATUS = 1-->
    </update>
    <delete id="delete" parameterType="int">
        <include refid="delete_user"></include>
        WHERE ID = #{id}
        AND DEL_YN = 0
        <!--            AND STATUS = 1-->
    </delete>
    <update id="deleteChoice" parameterType="java.util.List">
        UPDATE
        USER_TB
        SET DEL_YN = 1
        WHERE DEL_YN = 0
        <!--            AND STATUS = 1-->
        AND ID IN
        <foreach item="listId" index="index" collection="list" open="(" separator="," close=")">#{listId}</foreach>
    </update>
    <select id="selectCountUserByEmail" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM USER_TB
        WHERE EMAIL = #{email}
            AND DEL_YN = 0
    </select>
    <!--<select id="findByUsername" resultMap="user" parameterType="map">
        <include refid="select_user"/>
        WHERE USERNAME = BINARY#{username}
        AND DEL_YN = 0
    </select>-->
    <!-- select inactivate user -->
    <select id="selectInactivateByEmail" resultMap="user" parameterType="String">
        SELECT *
        FROM USER_TB
        WHERE EMAIL = #{email}
        AND DEL_YN = 0
        AND EMAIL_VERIFIED_AT IS NULL
    </select>
    <select id="selectByEmail" resultMap="user" parameterType="String">
        SELECT *
        FROM USER_TB
        WHERE EMAIL = #{email}
        AND DEL_YN = 0
        AND EMAIL_VERIFIED_AT IS NOT NULL
    </select>
    <select id="selectByUsername" resultMap="user" parameterType="String">
        SELECT *
        FROM USER_TB
        WHERE USERNAME = #{username}
        AND DEL_YN = 0
        AND EMAIL_VERIFIED_AT IS NOT NULL
    </select>
<!--    <update id="lockUser" parameterType="map">-->
<!--        UPDATE USER_TB-->
<!--        SET OTP_FAILED_COUNT = 0,-->
<!--        <if test="lockedTime != null">-->
<!--            LOCKED_TIME = #{lockedTime}-->
<!--        </if>-->
<!--        <if test="lockedTime == null">-->
<!--            LOCKED_TIME = NULL-->
<!--        </if>-->
<!--        WHERE ID = #{id} and DEL_YN = 0 AND EMAIL_VERIFIED_AT IS NOT NULL-->
<!--    </update>-->
<!--    &lt;!&ndash; increase OTP failed count &ndash;&gt;-->
<!--    <update id="increaseOTPFailedCount" parameterType="long">-->
<!--        UPDATE USER_TB-->
<!--        SET OTP_FAILED_COUNT = CASE WHEN OTP_FAILED_COUNT IS NULL THEN 1 ELSE OTP_FAILED_COUNT + 1 END-->
<!--        WHERE ID = #{id} AND DEL_YN = 0 AND EMAIL_VERIFIED_AT IS NULL-->
<!--    </update>-->

<!--    &lt;!&ndash; increase login failed count &ndash;&gt;-->
<!--    <update id="increaseLoginFailedCount" parameterType="long">-->
<!--        UPDATE USER_TB-->
<!--        SET OTP_FAILED_COUNT = CASE WHEN OTP_FAILED_COUNT IS NULL THEN 1 ELSE OTP_FAILED_COUNT + 1 END-->
<!--        WHERE ID = #{id} AND DEL_YN = 0 AND EMAIL_VERIFIED_AT IS NOT NULL-->
<!--    </update>-->
    <update id="activate" parameterType="int">
        UPDATE USER_TB
        SET EMAIL_VERIFIED_AT = NOW(), OTP = NULL, OTP_TIME_SENT = NULL
        WHERE ID = #{id} AND DEL_YN = 0 AND EMAIL_VERIFIED_AT IS NULL
    </update>
    <update id="setNewOtp" parameterType="map">
        UPDATE USER_TB
        SET OTP = #{otp}, OTP_TIME_SENT = #{otpTimeSent}
        WHERE ID = #{id} AND DEL_YN = 0 AND EMAIL_VERIFIED_AT IS NULL
    </update>

    <select id="selectRoleById" resultType="String" parameterType="int">
        SELECT USER_TB.ROLE
        FROM USER_TB
        WHERE ID = #{id}
        AND DEL_YN = 0 AND EMAIL_VERIFIED_AT IS NOT NULL
    </select>
    <select id="selectEmployerAndCompanyIdById" resultType="int" parameterType="int">
        SELECT COMPANY_ID
        FROM USER_TB
        WHERE ID = #{id}
        AND ROLE = 'EMPLOYER'
        AND DEL_YN AND EMAIL_VERIFIED_AT IS NOT NULL
    </select>
    <update id="changePassword" parameterType="map">
        UPDATE USER_TB
        SET HASHED_PASSWORD = #{newPassword}
        WHERE ID = #{id} AND DEL_YN = 0 AND EMAIL_VERIFIED_AT IS NOT NULL
    </update>
</mapper>